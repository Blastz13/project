// Generated by view binder compiler. Do not edit!
package com.example.shop.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.shop.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProductSpecificationItemLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View divider6;

  @NonNull
  public final LinearLayout linearLayout2;

  @NonNull
  public final TextView specName;

  @NonNull
  public final TextView specValue;

  private ProductSpecificationItemLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull View divider6, @NonNull LinearLayout linearLayout2, @NonNull TextView specName,
      @NonNull TextView specValue) {
    this.rootView = rootView;
    this.divider6 = divider6;
    this.linearLayout2 = linearLayout2;
    this.specName = specName;
    this.specValue = specValue;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ProductSpecificationItemLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ProductSpecificationItemLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.product_specification_item_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ProductSpecificationItemLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider6;
      View divider6 = ViewBindings.findChildViewById(rootView, id);
      if (divider6 == null) {
        break missingId;
      }

      id = R.id.linearLayout2;
      LinearLayout linearLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout2 == null) {
        break missingId;
      }

      id = R.id.spec_name;
      TextView specName = ViewBindings.findChildViewById(rootView, id);
      if (specName == null) {
        break missingId;
      }

      id = R.id.spec_value;
      TextView specValue = ViewBindings.findChildViewById(rootView, id);
      if (specValue == null) {
        break missingId;
      }

      return new ProductSpecificationItemLayoutBinding((ConstraintLayout) rootView, divider6,
          linearLayout2, specName, specValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
