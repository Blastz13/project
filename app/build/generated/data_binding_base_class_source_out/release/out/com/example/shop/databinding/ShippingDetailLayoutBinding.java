// Generated by view binder compiler. Do not edit!
package com.example.shop.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.shop.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ShippingDetailLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView addressDetail;

  @NonNull
  public final Button changeOrAddAddressBtn;

  @NonNull
  public final View divider14;

  @NonNull
  public final TextView fullnameOrder;

  @NonNull
  public final TextView indexAddressOrder;

  @NonNull
  public final TextView textView15;

  private ShippingDetailLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView addressDetail, @NonNull Button changeOrAddAddressBtn,
      @NonNull View divider14, @NonNull TextView fullnameOrder, @NonNull TextView indexAddressOrder,
      @NonNull TextView textView15) {
    this.rootView = rootView;
    this.addressDetail = addressDetail;
    this.changeOrAddAddressBtn = changeOrAddAddressBtn;
    this.divider14 = divider14;
    this.fullnameOrder = fullnameOrder;
    this.indexAddressOrder = indexAddressOrder;
    this.textView15 = textView15;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ShippingDetailLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ShippingDetailLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.shipping_detail_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ShippingDetailLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.address_detail;
      TextView addressDetail = ViewBindings.findChildViewById(rootView, id);
      if (addressDetail == null) {
        break missingId;
      }

      id = R.id.change_or_add_address_btn;
      Button changeOrAddAddressBtn = ViewBindings.findChildViewById(rootView, id);
      if (changeOrAddAddressBtn == null) {
        break missingId;
      }

      id = R.id.divider14;
      View divider14 = ViewBindings.findChildViewById(rootView, id);
      if (divider14 == null) {
        break missingId;
      }

      id = R.id.fullname_order;
      TextView fullnameOrder = ViewBindings.findChildViewById(rootView, id);
      if (fullnameOrder == null) {
        break missingId;
      }

      id = R.id.index_address_order;
      TextView indexAddressOrder = ViewBindings.findChildViewById(rootView, id);
      if (indexAddressOrder == null) {
        break missingId;
      }

      id = R.id.textView15;
      TextView textView15 = ViewBindings.findChildViewById(rootView, id);
      if (textView15 == null) {
        break missingId;
      }

      return new ShippingDetailLayoutBinding((ConstraintLayout) rootView, addressDetail,
          changeOrAddAddressBtn, divider14, fullnameOrder, indexAddressOrder, textView15);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
